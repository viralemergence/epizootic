// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// aspatial_siri
Rcpp::List aspatial_siri(Rcpp::List pop_list, Rcpp::List mortality_list, Rcpp::List transmission_list, Rcpp::List recovery_list, Rcpp::List fecundity_list, double abundance_threshold, Rcpp::NumericVector carrying_capacity_list, const char * season);
RcppExport SEXP _epizootic_aspatial_siri(SEXP pop_listSEXP, SEXP mortality_listSEXP, SEXP transmission_listSEXP, SEXP recovery_listSEXP, SEXP fecundity_listSEXP, SEXP abundance_thresholdSEXP, SEXP carrying_capacity_listSEXP, SEXP seasonSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pop_list(pop_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type mortality_list(mortality_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type transmission_list(transmission_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type recovery_list(recovery_listSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type fecundity_list(fecundity_listSEXP);
    Rcpp::traits::input_parameter< double >::type abundance_threshold(abundance_thresholdSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type carrying_capacity_list(carrying_capacity_listSEXP);
    Rcpp::traits::input_parameter< const char * >::type season(seasonSEXP);
    rcpp_result_gen = Rcpp::wrap(aspatial_siri(pop_list, mortality_list, transmission_list, recovery_list, fecundity_list, abundance_threshold, carrying_capacity_list, season));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_epizootic_aspatial_siri", (DL_FUNC) &_epizootic_aspatial_siri, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_epizootic(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
